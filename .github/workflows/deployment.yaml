name: pipeline of AWS Elastic Container Service
on:
  push:
    branches:
      - master
env:
  ECR_REPOSITORY: mynginxapp
  CONTAINER_NAME: nginx-app 
  ECS_SERVICE: nginxappsvc
  ECS_CLUSTER: DevCluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: action checkout
        uses: actions/checkout@v4
      
      - name: AWS credentials configure
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: AWS ECR login configuration
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
     
      - name: Fill in the new image ID in the amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

